unit TestuRedisHandle;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, SysUtils, IdTCPClient, uRedisHandle;

type
  // Test methods for class TRedisHandle

  TestTRedisHandle = class(TTestCase)
  strict private
    FRedisHandle: TRedisHandle;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestStrSet;
    procedure TestStrSetExpire;
    procedure TestStrGet;
    procedure TestStrDel;

    procedure TestListRPush;
    procedure TestListLPop;

    procedure TestListLen;
    procedure TestListRange;


  end;

const
  C_Key_Pre = '主键:';
  C_Value_Pre = '"值": ';

  C_List_Key = '主键:list';

implementation

procedure TestTRedisHandle.SetUp;
begin
  FRedisHandle := TRedisHandle.Create();
  FRedisHandle.Ip := '127.0.0.1';
  FRedisHandle.Port := 6379;
  FRedisHandle.Password := 'tcrq1234';
  FRedisHandle.Db := 1;

  FRedisHandle.Connection := True;
  FRedisHandle.RedisAuth;
  FRedisHandle.RedisSelect;

end;

procedure TestTRedisHandle.TearDown;
begin
  FRedisHandle.Free;
  FRedisHandle := nil;
end;

procedure TestTRedisHandle.TestListLen;
var
  aKey: string;
  aCount: Integer;
begin
  aKey := C_List_Key;
  aCount := FRedisHandle.ListLen(aKey);

  Status('listlen: ' + aKey + ' ' + IntToStr(aCount));
end;



procedure TestTRedisHandle.TestListLPop;
var
  aValue: String;
begin

  while True do
  begin
    aValue := FRedisHandle.ListLPop(C_List_Key);
    if aValue = '' then Break;
    Status(aValue);
  end;

end;


procedure TestTRedisHandle.TestListRange;
var
  aLen: Integer;
  aValues: TStringList;
  i: Integer;
begin
  aLen := FRedisHandle.ListLen(C_List_Key);
  Status(C_List_Key + ' len: ' + IntToStr(aLen));

  aValues := TStringList.Create();
  try
    FRedisHandle.ListRange(C_List_Key, 0, aLen - 1, aValues);
    Status(aValues.Text);

  finally
    aValues.Free;
  end;

end;

procedure TestTRedisHandle.TestListRPush;
var
  i: Integer;
  aValue: String;
begin
  for i := 0 to 9 do
  begin
    aValue := '值-list-' + IntToStr(i);
    FRedisHandle.ListRPush(C_List_Key, aValue);

    Status(C_List_Key + ' List RPush:' + aValue);
  end;

end;

procedure TestTRedisHandle.TestStrDel;
var
  aKey: string;
  i: Integer;
begin
  for i := 0 to 9 do
  begin
    aKey := C_Key_Pre + IntToStr(i);
    FRedisHandle.StringDel(aKey);

    Status('Del ' + aKey);
  end;

end;

procedure TestTRedisHandle.TestStrGet;
var
  aKey, aValue: string;
  i: Integer;
begin
  for i := 0 to 9 do
  begin
    aKey := C_Key_Pre + IntToStr(i);
    aValue := FRedisHandle.StringGet(aKey);

    Status('Get ' + aKey + ' : ' + aValue);
  end;

end;



procedure TestTRedisHandle.TestStrSet;
var
  aValue: string;
  aKey: string;
  i: Integer;
begin
  for i := 0 to 9 do
  begin
    aKey := C_Key_Pre + IntToStr(i);
    aValue := C_Value_Pre + IntToStr(i);
    FRedisHandle.StringSet(aKey, aValue);

    Status('Set ' + aKey + ' : ' + aValue);
  end;

end;

procedure TestTRedisHandle.TestStrSetExpire;
var
  aValue: string;
  aKey: string;
  i: Integer;
begin
  for i := 0 to 9 do
  begin
    aKey := C_Key_Pre + IntToStr(i);
    aValue := C_Value_Pre + IntToStr(i);
    FRedisHandle.StringSet(aKey, aValue, 15);

    Status('Set ' + aKey + ' : ' + aValue);
  end;

end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTRedisHandle.Suite);
end.

