unit TestuRedisHandle;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, SysUtils, IdTCPClient, uRedisHandle;

type
  // Test methods for class TRedisHandle

  TestTRedisHandle = class(TTestCase)
  strict private
    FRedisHandle: TRedisHandle;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestStringSetExpire;
    procedure TestStringGetSet;

    procedure TestKey;


    procedure TestListRPush;
    procedure TestListRPop;

    procedure TestListLPush;
    procedure TestListLPop;

    procedure TestListLen;
    procedure TestListRange;
    procedure TestListRemove;


  end;

const
  C_Key_Pre = '主键:';
  C_Value_Pre = '"值": ';

  C_List_Key = '主键:list';
  C_List_Value_Pre = '值-list-';

implementation

procedure TestTRedisHandle.SetUp;
begin
  FRedisHandle := TRedisHandle.Create();
  FRedisHandle.Ip := '192.168.1.3';
  FRedisHandle.Port := 6379;
  FRedisHandle.Password := 'tcrq1234';
  FRedisHandle.Db := 1;

end;

procedure TestTRedisHandle.TearDown;
begin
  FRedisHandle.Free;
  FRedisHandle := nil;
end;

procedure TestTRedisHandle.TestListLen;
var
  aKey: string;
  aCount: Integer;
begin
  aKey := C_List_Key;
  aCount := FRedisHandle.ListLen(aKey);

  Status('listlen: ' + aKey + ' ' + IntToStr(aCount));
end;



procedure TestTRedisHandle.TestListLPop;
var
  aValue: String;
begin

  while True do
  begin
    aValue := FRedisHandle.ListLPop(C_List_Key);
    if aValue = '' then Break;
    Status(aValue);
  end;

end;


procedure TestTRedisHandle.TestListLPush;
var
  i: Integer;
  aValue: String;
begin
  for i := 0 to 9 do
  begin
    aValue := C_List_Value_Pre + IntToStr(i);
    FRedisHandle.ListLPush(C_List_Key, aValue);

    Status(C_List_Key + ' List LPush:' + aValue);
  end;

  FRedisHandle.ListLPush(C_List_Key, ['111','222','333']);

end;

procedure TestTRedisHandle.TestListRange;
var
  aLen: Integer;
  aValues: TStringList;
begin
  aLen := FRedisHandle.ListLen(C_List_Key);
  Status(C_List_Key + ' len: ' + IntToStr(aLen));

  aValues := TStringList.Create();
  try
    FRedisHandle.ListRange(C_List_Key, 0, aLen - 1, aValues);
    Status(aValues.Text);

  finally
    aValues.Free;
  end;

end;

procedure TestTRedisHandle.TestListRemove;
var
  i, aRemoveCount: Integer;
  aValue: String;
begin
  for i := 0 to 9 do
  begin
    aValue := C_List_Value_Pre + IntToStr(i);
    aRemoveCount := FRedisHandle.ListRemove(C_List_Key, aValue, 2);

    Status(C_List_Key + ' Remove ' + aValue + ' count:' + IntToStr(aRemoveCount));
  end;

end;

procedure TestTRedisHandle.TestListRPop;
var
  aValue: String;
begin

  while True do
  begin
    aValue := FRedisHandle.ListRPop(C_List_Key);
    if aValue = '' then Break;
    Status(aValue);
  end;

end;

procedure TestTRedisHandle.TestListRPush;
var
  i: Integer;
  aValue: String;
begin
  for i := 0 to 9 do
  begin
    aValue := C_List_Value_Pre + IntToStr(i);
    FRedisHandle.ListRPush(C_List_Key, aValue);

    Status(C_List_Key + ' List RPush:' + aValue);
  end;

  FRedisHandle.ListRPush(C_List_Key, ['111','222','333']);

end;

procedure TestTRedisHandle.TestKey;
var
  aKey: string;
begin

  aKey := C_Key_Pre + IntToStr(100);

  FRedisHandle.StringSet(aKey, '123');
  CheckTrue(FRedisHandle.KeyExist(aKey), 'KeyExist Fail');
  Status('KeyExist ok');

  FRedisHandle.KeySetExpire(aKey, 2);
  Sleep(2010);
  CheckTrue(not FRedisHandle.KeyExist(aKey), 'KeyExist Fail');
  Status('KeySetExpire ok');

  FRedisHandle.StringSet(aKey, '123');
  FRedisHandle.KeyDelete(aKey);
  CheckTrue(not FRedisHandle.KeyExist(aKey), 'KeyDelete Fail');

  Status('KeyDelete ok');

end;



procedure TestTRedisHandle.TestStringGetSet;
var
  aKey, aValue, aNewValue: string;
  i: Integer;
begin
  for i := 0 to 9 do
  begin
    aKey := C_Key_Pre + IntToStr(i);
    aNewValue := 'new:' + IntToStr(i);
    aValue := 'old:' + IntToStr(i);

    FRedisHandle.StringSet(aKey, aValue);
    CheckTrue(aValue = FRedisHandle.StringGetSet(aKey, aNewValue));

    CheckTrue(aNewValue = FRedisHandle.StringGet(aKey), 'StringGetSet fail');
    Status(aKey + ' : ' + aValue + ',' + aNewValue);
  end;

end;


procedure TestTRedisHandle.TestStringSetExpire;
var
  aValue: string;
  aKey: string;
  i: Integer;
begin
  for i := 0 to 9 do
  begin
    aKey := C_Key_Pre + IntToStr(i);
    aValue := C_Value_Pre + IntToStr(i);
    FRedisHandle.StringSet(aKey, aValue, 15);

    Status('Set ' + aKey + ' : ' + aValue);
  end;

end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTRedisHandle.Suite);
end.

