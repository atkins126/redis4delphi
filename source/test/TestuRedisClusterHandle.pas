unit TestuRedisClusterHandle;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, uRedisCommand, StrUtils, Classes, uRedisCommon, SysUtils, uRedisHandle,
  Contnrs, uRedisClusterHandle;

type
  // Test methods for class TRedisClusterHandle

  TestTRedisClusterHandle = class(TTestCase)
  strict private
    FRedisClusterHandle: TRedisClusterHandle;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAddNode;

    procedure TestStringSetExpire;
    procedure TestStringGetSet;

    procedure TestKey;
  end;

const
  C_Key_Pre = '主键C:';
  C_Value_Pre = '"值C": ';

  C_List_Key = '主键C:list';
  C_List_Value_Pre = '值C-list-';


implementation

procedure TestTRedisClusterHandle.SetUp;
begin
  FRedisClusterHandle := TRedisClusterHandle.Create;

  FRedisClusterHandle.Password := 'tcrq1234';
  FRedisClusterHandle.AddNode('192.168.1.80', 6379);

end;

procedure TestTRedisClusterHandle.TearDown;
begin
  FRedisClusterHandle.Free;
  FRedisClusterHandle := nil;
end;

procedure TestTRedisClusterHandle.TestAddNode;
var
  ReturnValue: TRedisHandle;
begin
  // TODO: Setup method call parameters
  ReturnValue := FRedisClusterHandle.AddNode('192.168.1.80', 6379);
  Check(Assigned(ReturnValue), 'AddNode Fail');
  ReturnValue := FRedisClusterHandle.AddNode('192.168.1.80', 6380);
  Check(Assigned(ReturnValue), 'AddNode Fail');
  ReturnValue := FRedisClusterHandle.AddNode('192.168.1.80', 6379);
  Check(Assigned(ReturnValue), 'AddNode Fail');
  ReturnValue := FRedisClusterHandle.AddNode('192.168.1.80', 6380);
  Check(Assigned(ReturnValue), 'AddNode Fail');

  Check(FRedisClusterHandle.GetNodeCount = 2, 'AddNode Fail');

  // TODO: Validate method results
end;

procedure TestTRedisClusterHandle.TestKey;
var
  aKey: string;
begin

  aKey := C_Key_Pre + IntToStr(100);

  FRedisClusterHandle.StringSet(aKey, '123');
  CheckTrue(FRedisClusterHandle.KeyExist(aKey), 'KeyExist Fail');
  Status('KeyExist ok');

  FRedisClusterHandle.KeySetExpire(aKey, 2);
  Sleep(2010);
  CheckTrue(not FRedisClusterHandle.KeyExist(aKey), 'KeyExist Fail');
  Status('KeySetExpire ok');

  FRedisClusterHandle.StringSet(aKey, '123');
  FRedisClusterHandle.KeyDelete(aKey);
  CheckTrue(not FRedisClusterHandle.KeyExist(aKey), 'KeyDelete Fail');

  Status('KeyDelete ok');
end;

procedure TestTRedisClusterHandle.TestStringGetSet;
var
  aKey, aValue, aNewValue: string;
  i: Integer;
begin
  for i := 0 to 9 do
  begin
    aKey := C_Key_Pre + IntToStr(i);
    aNewValue := 'new:' + IntToStr(i);
    aValue := 'old:' + IntToStr(i);

    FRedisClusterHandle.StringSet(aKey, aValue);
    CheckTrue(aValue = FRedisClusterHandle.StringGetSet(aKey, aNewValue));

    CheckTrue(aNewValue = FRedisClusterHandle.StringGet(aKey), 'StringGetSet fail');
    Status(aKey + ' : ' + aValue + ',' + aNewValue);
  end;

end;

procedure TestTRedisClusterHandle.TestStringSetExpire;
var
  aValue: string;
  aKey: string;
  i: Integer;
begin
  for i := 0 to 9 do
  begin
    aKey := C_Key_Pre + IntToStr(i);
    aValue := C_Value_Pre + IntToStr(i);
    FRedisClusterHandle.StringSet(aKey, aValue, 15);

    Status('Set ' + aKey + ' : ' + aValue);
  end;

end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTRedisClusterHandle.Suite);
end.

